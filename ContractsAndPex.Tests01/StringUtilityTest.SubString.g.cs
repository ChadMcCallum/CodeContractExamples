// <copyright file="StringUtilityTest.SubString.g.cs" company="Microsoft">Copyright © Microsoft 2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Framework.Explorable;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace ContractsAndPex
{
    public partial class StringUtilityTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StringUtilityTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void SubStringThrowsContractException656()
{
    try
    {
      StringUtility stringUtility;
      string s;
      stringUtility = PexInvariant.CreateInstance<StringUtility>();
      PexInvariant.SetField<string>
          ((object)stringUtility, "<Target>k__BackingField", "\0");
      PexInvariant.CheckInvariant((object)stringUtility);
      s = this.SubString(stringUtility, (string)null, 0, 0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(StringUtilityTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void SubStringThrowsContractException870()
{
    try
    {
      StringUtility stringUtility;
      string s;
      stringUtility = PexInvariant.CreateInstance<StringUtility>();
      PexInvariant.SetField<string>
          ((object)stringUtility, "<Target>k__BackingField", "\0");
      PexInvariant.CheckInvariant((object)stringUtility);
      s = this.SubString(stringUtility, "\0", 0, 0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(StringUtilityTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void SubStringThrowsContractException61()
{
    try
    {
      StringUtility stringUtility;
      string s;
      stringUtility = PexInvariant.CreateInstance<StringUtility>();
      PexInvariant.SetField<string>
          ((object)stringUtility, "<Target>k__BackingField", "\0");
      PexInvariant.CheckInvariant((object)stringUtility);
      s = this.SubString(stringUtility, "\0", 0, 1);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(StringUtilityTest))]
public void SubString820()
{
    StringUtility stringUtility;
    string s;
    stringUtility = PexInvariant.CreateInstance<StringUtility>();
    PexInvariant.SetField<string>
        ((object)stringUtility, "<Target>k__BackingField", "\0");
    PexInvariant.CheckInvariant((object)stringUtility);
    s = this.SubString(stringUtility, "\0\0", 0, 1);
    Assert.AreEqual<string>("\0", s);
    Assert.IsNotNull((object)stringUtility);
    Assert.AreEqual<string>("\0", stringUtility.Target);
}
[TestMethod]
[PexGeneratedBy(typeof(StringUtilityTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void SubStringThrowsContractException157()
{
    try
    {
      StringUtility stringUtility;
      string s;
      stringUtility = PexInvariant.CreateInstance<StringUtility>();
      PexInvariant.SetField<string>
          ((object)stringUtility, "<Target>k__BackingField", "\0");
      PexInvariant.CheckInvariant((object)stringUtility);
      s = this.SubString(stringUtility, "\0", int.MinValue, 0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
